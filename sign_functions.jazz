require "params.jinc"
require "echelon_form.jazz"



u8[F_TAIL_LEN] f_tail = {
    0x08, 0x00, 0x02, 0x08, 0x00
};

inline fn copy_paramou8(stack u8[paramo] src) -> stack u8[paramo] {
  stack u8[paramo] dst;
  dst = #copy_8(src);
  return dst;
}


inline fn reduce_A_mod_fX(stack u8[2 * paramm * (paramk * paramo + 1)] A_s)->stack u8[2 * paramm * (paramk * paramo + 1)]{
    inline int i j k; reg u64 tmp tmp1;

    for i = (paramm + paramk * (paramk + 1) / 2 - 2) downto paramm - 1{
      for k = 0 to param_A_cols - 1 {
        for j = 0 to F_TAIL_LEN{
            tmp = (64u)A_s[i * param_A_cols + k];
            tmp1 = (64u)f_tail[j];
            tmp = gf16_mul(tmp, tmp1);
            tmp1 = (64u)A_s[(i - paramm + j) * param_A_cols + k];
            tmp1 ^= tmp;
            
            A_s[(i - paramm + j) * param_A_cols + k] = tmp1;

        }
        A_s[i * param_A_cols + k] = 0;
      }
       
    }
    return A_s;
}


fn decode_r(reg ptr u8[param_r_bytes] m, reg ptr u8[paramk * paramo] mdec_p)->reg ptr u8[paramk * paramo]
{
     inline int i mdeclen; 
     reg u8 tmp;

     mdeclen = paramk * paramo;

     for i = 0 to mdeclen/2{
          tmp = m[i];
          tmp = tmp & 0xf;

          mdec_p[i * 2] = tmp;

          tmp = m[i];
          tmp = tmp >> 4;
          mdec_p[i * 2 + 1] = tmp;
     }
     if ((mdeclen % 2) ==1)
     {
          tmp = m[i];
          tmp = tmp & 0xf;
          mdec_p[mdeclen - 1] = tmp;
     }
     return mdec_p;

}

inline fn reduce_y_mod_fX(stack u8[2 * paramm] y_s)->stack u8[2 * paramm]{
    inline int i j; reg u64 tmp tmp1;

    for i = (paramm + paramk * (paramk + 1) / 2 - 2) downto paramm - 1{
        for j = 0 to F_TAIL_LEN{
            tmp = (64u)y_s[i];
            tmp1 = (64u)f_tail[j];
            tmp = gf16_mul(tmp, tmp1);
            tmp1 = (64u)y_s[i - paramm + j];
            tmp1 ^= tmp;
            tmp = tmp1;
            tmp1 = i;
            tmp1 -= paramm;
            tmp1 += j;

            y_s[tmp1] = tmp;

        }
        y_s[i] = 0;
    }
    return y_s;
}


fn decode_o_vdec(reg ptr u8[param_v_bytes] m, reg ptr u8[paramn - paramo] mdec_p)->reg ptr u8[paramn - paramo]
{
     inline int mdeclen; 
     reg u8 tmp; reg u64 i; i = 0;

     mdeclen = paramn - paramo;

     while(i < mdeclen/2){
          tmp = m[i];
          tmp = tmp & 0xf;

          mdec_p[i * 2] = tmp;

          tmp = m[i];
          tmp = tmp >> 4;
          mdec_p[i * 2 + 1] = tmp;
          i += 1;
     }
     if ((mdeclen % 2) ==1)
     {
          tmp = m[i];
          tmp = tmp & 0xf;
          mdec_p[mdeclen - 1] = tmp;
     }
     return mdec_p;

}




inline fn copy_tmat(stack u8[paramm] src) -> stack u8[paramm] {
  stack u8[paramm] dst;
  dst = #copy_8(src);
  return dst;
}

inline fn lincomb(reg ptr u8[73] a, reg ptr u8[73] b)-> reg u8
{
    inline int colrow_ab i;
    colrow_ab = 73; reg u8 ans;
    reg u64 ret tmp aux;
    ret = 0;

    for i = 0 to colrow_ab{
        tmp = (64u)a[i];
        aux = (64u)b[i];
        tmp = gf16_mul(tmp, aux);
        ret = gf16_add(tmp, ret);
    }
    ans = ret;
    return ans;
}


inline fn lincomb_o(reg ptr u8[paramo] a, reg ptr u8[paramo] b)-> reg u8
{
    inline int colrow_ab i;
    colrow_ab = paramo; reg u8 ans;
    reg u64 ret tmp aux;
    ret = 0;

    for i = 0 to colrow_ab{
        tmp = (64u)a[i];
        aux = (64u)b[i];
        tmp = gf16_mul(tmp, aux);
        ret = gf16_add(tmp, ret);
    }
    ans = ret;
    return ans;
}

fn mat_mul(reg ptr u8[4672] AA, reg ptr u8[73] r, reg ptr u8[64] Ar)->reg ptr u8[64]{

inline int i;

for i = 0 to 64{
    
    Ar[i] = lincomb(AA[i * 73: 73], r);
}
return Ar;

}

fn mat_mul_s(reg ptr u8[(paramn - paramo) * paramo] O, reg ptr u8[paramo] x, reg ptr u8[paramn - paramo] Ox)->reg ptr u8[paramn - paramo]{

inline int i;

for i = 0 to (paramn - paramo){
    
    Ox[i] = lincomb_o(O[i * paramo: paramo], x);
}
return Ox;

}

inline fn sample_solution(reg ptr u8[2 * paramm * (paramk * paramo + 1)] Amat_s, reg ptr u8[2 * paramm] yvec_s, reg ptr u8[paramk * paramo + 1] rvec_s, reg ptr u8[paramk * paramn] x_s)-> reg u8, reg ptr u8[paramk * paramn]
{
   
    inline int k o m A_cols;
    k = paramk;
    o = paramo;
    m = paramm;
    A_cols = param_A_cols;

    stack u8[paramm] Arvec;
    inline int i;

    stack u8[paramm * (paramk * paramo + 1)] Amat_cpy;

    reg u64 ir;
    reg u8 tmp;

    ir = 0; 
    while(ir < paramm * (paramk * paramo + 1)){
        tmp = Amat_s[ir];
        Amat_cpy[ir] = tmp;
        ir+=1;
    }

    stack u8[paramk * paramo + 1] rvec_cpy;
    stack u8[paramk * paramn] x_cpy;
    ir = 0; 
    while(ir < paramk * paramo + 1){
        tmp = rvec_s[ir];
        rvec_cpy[ir] = tmp;     
        ir += 1;
    }
    ir = 0; 
    while(ir < paramk * paramo + 1){
        tmp = rvec_s[ir];    
        x_cpy[ir] = tmp;
        ir += 1;
    }
    stack u8[paramm] y_cpy;
    ir = 0; 
    while(ir < paramm){
        tmp = yvec_s[ir];
        y_cpy[ir] = tmp;
        ir += 1;
    }


    for i = 0 to paramm{
        Amat_cpy[k * o + i * (k * o + 1)] = 0;
    }
    

    Arvec = mat_mul(Amat_cpy, rvec_cpy, Arvec);

    inline int i1;  reg u64 aux1 aux2; 


    for i1 = 0 to paramm{
        aux1 = (64u)y_cpy[i1];
        
        aux2 = (64u)Arvec[i1];
        
        aux1 = gf16_sub(aux1, aux2);
        
        Amat_cpy[k * o + i1 *  (k * o + 1)] = aux1;
    }

    inline int NROWS NCOLS legs;

    NROWS = paramm;
    NCOLS = paramk * paramo + 1;
    legs = (NCOLS + 31) / 32;

    stack u8[2 * paramm * (paramk * paramo + 1)] Amat_mod;

    reg u64 idx; reg u8 tmp3;
    idx = 0;
    while(idx < paramm * (paramk * paramo + 1)){
        tmp3 = Amat_cpy[idx];
        Amat_mod[idx] = tmp3;
        idx += 1;
    }
    while(idx < 2 * paramm * (paramk * paramo + 1)){
        Amat_mod[idx] = 0;
        idx += 1;
    }

    Amat_cpy = ef(Amat_mod, Amat_cpy);
    

    reg u64 tmp4;
    stack u64 full_rank;
    full_rank = 0;

    inline int i2;

    for i2 = 0 to A_cols - 1{
        tmp4 = (64u)Amat_cpy[63 * 73 + i2];
        full_rank |= tmp4;
    }

    reg u8 result;
    if(full_rank == 0) {
                result = 0;
    }
    else{
        reg u64 aux4 correct_column; 
        stack u64 not_finished finished aux3 col_upper_bound;
        inline int r;

        for r = 63 downto -1 {
            finished = 0;
            aux3 = 64 - r;
            aux4 = 32;
            aux4  /= aux3;
            aux4 += r;
            if(aux4 < 72){
                col_upper_bound = aux4;
            }
            else{
                col_upper_bound = 72;
            }

            reg u64 col ;
            col = r;                    
            while(col <= col_upper_bound){
                tmp = Amat_cpy[r * 73 + col];
                if(tmp == 0x00){
                    correct_column = 0x00;
                }
                else{
                    correct_column = 0xff;
                }
                        
                not_finished = finished;
                not_finished = !not_finished;
                correct_column &= not_finished;          
                        
                reg u64 us; 
                us = (64u)Amat_cpy[r * 73 + 72];                        
                us &= correct_column;
                x_cpy[col] ^= us;

                reg u64 i3 tmp6 tmp7 test;
                i3 = 0;     
                while(i3 < r){
                    test = i3 * 73;
                    test += col;
                         
                    tmp6 = (64u)Amat_cpy[test];
                    tmp6 <<=  0;

                    test = (i3 + 1);
                    test *= 73;
                    test += col;
                    tmp7 = (64u)Amat_cpy[test];
                    tmp7 <<=  8;

                    tmp6 ^= tmp7;
                    test = (i3 + 2);
                    test *= 73;
                    test += col;
                    tmp7 = (64u)Amat_cpy[test];
                        
                    tmp7 <<=  16;
                    tmp6 ^= tmp7;

                    test = (i3 + 3);
                    test *= 73;
                    test += col;
                    tmp7 = (64u)Amat_cpy[test];
                        
                    tmp7 <<=  24;
                    tmp6 ^= tmp7;

                    test = (i3 + 4);
                    test *= 73;
                    test += col;
                    tmp7 = (64u)Amat_cpy[test];
                            
                    tmp7 <<=  32;
                    tmp6 ^= tmp7;

                    test = (i3 + 5);
                    test *= 73;
                    test += col;
                    tmp7 = (64u)Amat_cpy[test];
                            
                    tmp7 <<=  40;
                    tmp6 ^= tmp7;

                    test = (i3 + 6);
                    test *= 73;
                    test += col;
                    tmp7 = (64u)Amat_cpy[test];
                         
                    tmp7 <<=  48;
                    tmp6 ^= tmp7;

                    test = (i3 + 7);
                    test *= 73;
                    test += col;
                    tmp7 = (64u)Amat_cpy[test];
                        
                    tmp7 <<=  56;
                    tmp6 ^= tmp7;

                    tmp6 = gf16_mul_fx8(us, tmp6);


                    tmp7 = tmp6;
                    tmp7 &= 0xf;

                    test = i3 * 73;
                    test += 72;
                    Amat_cpy[test] ^= tmp7;

                    tmp7 = tmp6;
                    tmp7 >>= 8;
                    tmp7 &= 0xf;

                    test = (i3+1);
                    test *= 73;
                    test += 72;
                    Amat_cpy[test] ^= tmp7;

                    tmp7 = tmp6;
                    tmp7 >>= 16;
                    tmp7 &= 0xf;

                    test = (i3+2);
                    test *= 73;
                    test += 72;
                    Amat_cpy[test] ^= tmp7;
                            
                    tmp7 = tmp6;
                    tmp7 >>= 24;
                    tmp7 &= 0xf;

                    test = (i3+3);
                    test *= 73;
                    test += 72;
                    Amat_cpy[test] ^= tmp7;

                    tmp7 = tmp6;
                    tmp7 >>= 32;
                    tmp7 &= 0xf;

                    test = (i3+4);
                    test *= 73;
                    test += 72;
                    Amat_cpy[test] ^= tmp7;
                        
                    tmp7 = tmp6;
                    tmp7 >>= 40;
                    tmp7 &= 0xf;

                    test = (i3+5);
                    test *= 73;
                    test += 72;
                    Amat_cpy[test] ^= tmp7;
                            
                    tmp7 = tmp6;
                    tmp7 >>= 48;
                    tmp7 &= 0xf;

                    test = (i3+6);
                    test *= 73;
                    test += 72;
                    Amat_cpy[test] ^= tmp7;
                            
                    tmp7 = tmp6;
                    tmp7 >>= 56;
                    tmp7 &= 0xf;

                    test = (i3+7);
                    test *= 73;
                    test += 72;
                    Amat_cpy[test] ^= tmp7;
                            

                    i3+= 8;
                }
                finished |= correct_column;
                           


            
            col += 1;
            }    

        }                

        result = 1;
    }

    ir = 0; 
    while(ir < paramk * paramo){
        tmp = x_cpy[ir];    
        x_s[ir] = tmp;
        ir += 1;
    }

    
    return result, x_s;





}



fn decode_o_sign(reg ptr u8[MAYO_2_O_bytes] m, reg ptr u8[2 * MAYO_2_O_bytes] mdec_p)->reg ptr u8[2 * MAYO_2_O_bytes]
{
     inline int i mdeclen; 
     reg u8 tmp;

     mdeclen = 2 * MAYO_2_O_bytes;

     for i = 0 to mdeclen/2{
          tmp = m[i];
          tmp = tmp & 0xf;

          mdec_p[i * 2] = tmp;

          tmp = m[i];
          tmp = tmp >> 4;
          mdec_p[i * 2 + 1] = tmp;
     }
     if ((mdeclen % 2) ==1)
     {
          tmp = m[i];
          tmp = tmp & 0xf;
          mdec_p[mdeclen - 1] = tmp;
     }
     return mdec_p;

}
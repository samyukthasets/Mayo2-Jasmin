param int KECCAK_ROUNDS = 24;

u64[24] KECCAK1600_RC =
{  0x0000000000000001
  ,0x0000000000008082
  ,0x800000000000808a
  ,0x8000000080008000
  ,0x000000000000808b
  ,0x0000000080000001
  ,0x8000000080008081
  ,0x8000000000008009
  ,0x000000000000008a
  ,0x0000000000000088
  ,0x0000000080008009
  ,0x000000008000000a
  ,0x000000008000808b
  ,0x800000000000008b
  ,0x8000000000008089
  ,0x8000000000008003
  ,0x8000000000008002
  ,0x8000000000000080
  ,0x000000000000800a
  ,0x800000008000000a
  ,0x8000000080008081
  ,0x8000000000008080
  ,0x0000000080000001
  ,0x8000000080008008
};

inline fn __index(inline int x y) -> inline int
{
  inline int r;
  r = (x % 5) + 5 * (y % 5);
  return r;
}

inline fn __keccak_rho_offsets(inline int i) -> inline int
{
  inline int r x y z t;

  r = 0;
  x = 1;
  y = 0;

  for t = 0 to 24 {
    if (i == x + 5 * y)
    { r = ((t + 1) * (t + 2) / 2) % 64; }
    z = (2 * x + 3 * y) % 5;
    x = y;
    y = z;
  }

  return r;
}

inline fn __rhotates(inline int x y) -> inline int
{
  inline int i r;
  i = __index(x, y);
  r = __keccak_rho_offsets(i);
  return r;
}

// /////////////////////////////////////////////////////////////////////////////

// C[x] = A[x,0] ^ A[x,1] ^ A[x,2] ^ A[x,3] ^ A[x,4]
inline fn __theta_sum(reg ptr u64[25] a) -> reg u64[5]
{
  inline int x y;
  reg u64[5] c;

  // C[x] = A[x, 0]
  for x=0 to 5
  { c[x] = a[x + 0]; }

  // C[x] ^= A[x,1] ^ A[x,2] ^ A[x,3] ^ A[x,4]
  for y=1 to 5
  { for x=0 to 5
    { c[x] ^= a[x + y*5]; }
  }

  return c;
}

// D[x] = C[x-1] ^ ROT(C[x+1], 1) 
inline fn __theta_rol(reg u64[5] c) -> reg u64[5]
{
  inline int x;
  reg u64[5] d;

  for x = 0 to 5
  { // D[x] = C[x + 1]
    d[x] = c[(x + 1) % 5];

    // D[x] = ROT(D[x], 1)
    _, _, d[x] = #ROL_64(d[x], 1);

    // D[x] ^= C[x-1]
    d[x] ^= c[(x - 1 + 5) % 5];
  }

  return d;
}

// B[x] = ROT( (A[x',y'] ^ D[x']), r[x',y'] ) with (x',y') = M^-1 (x,y)
//
// M = (0 1)  M^-1 = (1 3)  x' = 1x + 3y
//     (2 3)         (1 0)  y' = 1x + 0y
//
inline fn __rol_sum(
  reg ptr u64[25] a,
  reg u64[5] d,
  inline int y
) -> reg u64[5]
{
  inline int r x x_ y_;
  reg u64[5] b;

  for x = 0 to 5
  {
    x_ = (x + 3*y) % 5;
    y_ = x;
    r = __rhotates(x_, y_);

    // B[x] = A[x',y']
    b[x] = a[x_ + y_*5];

    // B[x] ^= D[x'];
    b[x] ^= d[x_];

    // B[x] = ROT( B[x], r[x',y'] );
    if(r != 0)
    { _, _, b[x] = #ROL_64(b[x], r); }

  }

  return b;
}

// E[x, y] = B[x] ^ ( (!B[x+1]) & B[x+2] )
// -- when x and y are 0: E[0,0] ^= RC[i];
inline fn __set_row(
  reg ptr u64[25] e,
  reg u64[5] b,
  inline int y,
  stack u64 s_rc
) -> reg ptr u64[25]
{
  inline int x x1 x2;
  reg u64 t;

  for x=0 to 5
  { 
    x1 = (x + 1) % 5;
    x2 = (x + 2) % 5;

    t  = !b[x1] & b[x2]; // bmi1 andnot

    t ^= b[x];
    if( x==0 && y==0 ){ t ^= s_rc; }
    e[x + y*5] = t;
  }

  return e;
}

inline fn __round(reg ptr u64[25] e a, stack u64 s_rc) -> reg ptr u64[25]
{
  inline int y;
  reg u64[5] b c d;

  c = __theta_sum(a);
  d = __theta_rol(c);

  for y = 0 to 5
  { b = __rol_sum(a, d, y);
    e = __set_row(e, b, y, s_rc);
  }

  return e;
}

inline fn __keccakf1600(reg ptr u64[25] a) -> reg ptr u64[25]
{
  reg ptr u64[24] RC;
  stack ptr u64[24] s_RC;
  stack u64[25] s_e;
  reg ptr u64[25] e;
  reg u64 c rc;
  stack u64 s_c s_rc;

  RC = KECCAK1600_RC;
  s_RC = RC;
  e = s_e;

  c = 0;
  while (c < KECCAK_ROUNDS - 1)
  {
    s_c = c;

    RC = s_RC;
    rc = RC[(int)c];
    s_rc = rc;
    e = __round(e, a, s_rc);

    RC = s_RC;
    rc = RC[(int)c + 1];
    s_rc = rc;
    a = __round(a, e, s_rc);

    c = s_c;
    c += 2;
  }

  return a;
}

#[returnaddress="stack"]
fn _keccakf1600(reg ptr u64[25] a) -> reg ptr u64[25]
{
  a = __keccakf1600(a);
  return a;
}

inline fn _keccakf1600_(reg ptr u64[25] a) -> reg ptr u64[25]
{
  a = a;
  a = _keccakf1600(a);
  a = a;
  return a;
}

inline fn __keccak_init(reg ptr u64[25] state) -> reg ptr u64[25]
{
  inline int i;
  reg u64 t;

  ?{}, t = #set0();
  for i=0 to 25 { state[i] = t; }

  return state;
}

inline fn __add_full_block_24(
  reg ptr u64[25] state,
  reg ptr u8[24] in,
  reg u64 offset,
  reg u64 rate
) -> reg ptr u64[25], reg u64
{
  reg u64 i t rate64;

  rate64 = rate;
  rate64 >>= 3;
  i = 0;
  while ( i < rate64 )
  {
    t = in[u64 (int)offset];
    state[(int) i] ^= t;
    i += 1;
    offset += 1;
  }

  return state, offset;
}

inline fn __add_final_block_24(
  reg ptr u64[25] state,
  reg ptr u8[24] in,
  reg u64 offset,
  reg u8 trail_byte,
  reg u64 rate
) -> reg ptr u64[25]
{
  reg u64 i t inlen64 inlen8;
  reg u8 c;

  t = offset;
  t <<= 3;
  inlen64 = 24;
  inlen64 -= t;
  inlen64 >>= 3;
  i = 0;
  while ( i < inlen64 )
  {
    t = in[u64 (int)offset];
    state[(int) i] ^= t;
    i += 1;
    offset += 1;
  }

  offset <<= 3;
  i <<= 3;
  inlen8 = 24;
  while ( offset < inlen8 )
  {
    c = in[(int) offset];
    state[u8 (int)i] ^= c;
    i += 1;
    offset += 1;
  }

  state[u8 (int)i] ^= trail_byte;

  i = rate;
  i -= 1;
  state[u8 (int)i] ^= 0x80;

  return state;
}

inline fn __absorb_24(
  reg ptr u64[25] state,
  reg ptr u8[24] in,
  reg u64 offset,
  stack u8 s_trail_byte,
  reg u64 rate // rate already in bytes -- it is returned bc of spills
) -> reg ptr u64[25], reg u64
{
  reg u64 inlen;
  stack u64 s_inlen s_offset s_rate;
  stack ptr u8[24] s_in;
  reg u8 trail_byte;

  // intermediate blocks
  inlen = 24;
  while ( inlen >= rate )
  {
    inlen -= rate;

    state, offset = __add_full_block_24(state, in, offset, rate);

    s_in = in;
    s_inlen = inlen;
    s_offset = offset;
    s_rate = rate;

    state = _keccakf1600(state);

    in = s_in;
    inlen = s_inlen;
    offset = s_offset;
    rate = s_rate;
  }

  // final block
  trail_byte = s_trail_byte;

  state = __add_final_block_24(state, in, offset, trail_byte, rate);

  return state, rate;
}

inline fn __xtr_full_block_556(
  reg ptr u64[25] state,
  reg ptr u8[556] out,
  reg u64 offset,
  reg u64 rate
) -> reg ptr u8[556], reg u64
{
  reg u64 i t rate64;

  rate64 = rate;
  rate64 >>= 3;
  i = 0;
  while ( i < rate64 )
  {
    t = state[(int)i];
    out[u64 offset] = t;
    i += 1;
    offset += 1;
  }

  return out, offset;
}

inline fn __xtr_bytes_556(
  reg ptr u64[25] state,
  reg ptr u8[556] out,
  reg u64 offset
) -> reg ptr u8[556], reg u64
{
  reg u64 i t outlen64 outlen8;
  reg u8 c;

  t = offset;
  t <<= 3;
  outlen64 = 556;
  outlen64 -= t;
  outlen64 >>= 3;
  i = 0;
  while ( i < outlen64 )
  {
    t = state[(int)i];
    out[u64 (int)offset] = t;
    i += 1;
    offset += 1;
  }

  offset <<= 3;
  i <<= 3;
  outlen8 = 556;
  while ( offset < outlen8 )
  {
    c = state[u8 (int)i];
    out[(int)offset] = c;
    i += 1;
    offset += 1;
  }

  return out, offset;
}

inline fn __squeeze_556(
  reg mut ptr u64[25] state,
  reg ptr u8[556] out,
  reg u64 offset,
  reg u64 rate
) -> reg ptr u8[556], reg u64
{
  reg u64 outlen;
  stack ptr u8[556] s_out;
  stack u64 s_outlen s_offset s_rate;

  // intermediate blocks
  outlen = 556;
  while ( outlen > rate )
  {
    outlen -= rate;

    s_out = out;
    s_offset = offset;
    s_outlen = outlen;
    s_rate = rate;

    state = _keccakf1600_(state);

    out = s_out;
    offset = s_offset;
    outlen = s_outlen;
    rate = s_rate;

    out, offset = __xtr_full_block_556(state, out, offset, rate);
  }

  s_out = out;
  s_offset = offset;

  state = _keccakf1600_(state);

  out = s_out;
  offset = s_offset;

  out, offset = __xtr_bytes_556(state, out, offset);

  return out, offset;
}

inline fn __keccak1600_556_24(
  reg ptr u8[556] out,
  reg ptr u8[24] in,
  reg u8 trail_byte,
  reg u64 rate)
  ->
  reg ptr u8[556]
{
  stack u64[25] _state;
  reg ptr u64[25] state;

  stack ptr u8[556] s_out;
  stack u8 s_trail_byte;
  reg u64 offset;

  s_out = out;
  s_trail_byte = trail_byte;

  state = _state;
  state = __keccak_init(state);

  // absorb
  offset = 0;
  state, rate = __absorb_24(state, in, offset, s_trail_byte, rate);

  // squeeze
  out = s_out;
  offset = 0;
  out, _ = __squeeze_556(state, out, offset, rate);
  return out;
}

#[returnaddress="stack"]
fn _keccak1600_556_24(
  reg ptr u8[556] out,
  reg ptr u8[24] in,
  reg u8 trail_byte,
  reg u64 rate)
  ->
  reg ptr u8[556]
{
  out = __keccak1600_556_24(out, in, trail_byte, rate);
  return out;
}

inline fn _keccak1600__556_24(
  reg ptr u8[556] out,
  reg ptr u8[24] in,
  reg u8 trail_byte,
  reg u64 rate)
  ->
  reg ptr u8[556]
{
  out = out;
  in = in;
  trail_byte = trail_byte;
  rate = rate;

  out = _keccak1600_556_24(out, in, trail_byte, rate);

  out = out;
  return out;
}

inline fn __shake256_556_24(
  reg ptr u8[556] out,
  reg ptr u8[24] in
) -> reg ptr u8[556]
{
  reg u64 rate;
  reg u8 trail_byte;

  trail_byte = 0x1F;
  rate = (1088/8);

  out = _keccak1600__556_24(out, in, trail_byte, rate);
  
  return out;
}

inline fn __add_full_block_x(
  reg ptr u64[25] state,
  reg u64 in inlen,
  reg u64 rate
) -> reg ptr u64[25], reg u64, reg u64
{
  reg u64 i t rate64;

  rate64 = rate;
  rate64 >>= 3;
  i = 0;
  while ( i < rate64 )
  {
    t = [in + 8*i];
    state[i] ^= t;
    i += 1;
    
  }

   in += rate;
  inlen -= rate;

  return state, in, inlen;
}

inline fn __add_final_block_x(
  reg ptr u64[25] state,
  reg u64 in inlen,
  reg u8 trail_byte,
  reg u64 rate
) -> reg ptr u64[25]
{
   reg u64 i t inlen8;
  reg u8 c;

  inlen8 = inlen;
  inlen8 >>= 3;
  i = 0;
  while ( i < inlen8 )
  {
    t = [in + 8*i];
    state[(int)i] ^= t;
    i += 1;
  }

  i <<= 3;
  while ( i < inlen )
  {
    c = (u8)[in + i];
    state[u8 (int)i] ^= c;
    i += 1;
  }

  state[u8 (int)i] ^= trail_byte;

  i = rate;
  i -= 1;
  state[u8 (int)i] ^= 0x80;

  return state;
}

inline fn __absorb_x(
  reg ptr u64[25] state,
  reg u64 in inlen,
  reg u64 offset,
  stack u8 s_trail_byte,
  reg u64 rate // rate already in bytes -- it is returned bc of spills
) -> reg ptr u64[25], reg u64
{
 // reg u64 inlen;
  stack u64 s_inlen s_in s_rate;
  reg u8 trail_byte;

  // intermediate blocks
   inlen = inlen;
  while ( inlen >= rate )
  {
    inlen -= rate;

    state, in, inlen = __add_full_block_x(state, in, inlen, rate);
    s_in = in;
    s_inlen = inlen; 
    s_rate = rate;

    state = _keccakf1600(state);

    in = s_in;
    inlen = s_inlen;
    rate = s_rate;
  }

  // final block
  trail_byte = s_trail_byte;

  state = __add_final_block_x(state, in, inlen, trail_byte, rate);

  return state, rate;
}

inline fn __xtr_full_block_32(
  reg ptr u64[25] state,
  reg ptr u8[32] out,
  reg u64 offset,
  reg u64 rate
) -> reg ptr u8[32], reg u64
{
  reg u64 i t rate64;

  rate64 = rate;
  rate64 >>= 3;
  i = 0;
  while ( i < rate64 )
  {
    t = state[i];
    out[u64  offset] = t;
    i += 1;
    offset += 1;
  }

  return out, offset;
}

inline fn __xtr_bytes_32(
  reg ptr u64[25] state,
  reg ptr u8[32] out,
  reg u64 offset
) -> reg ptr u8[32], reg u64
{
  reg u64 i t outlen64 outlen8;
  reg u8 c;

  t = offset;
  t <<= 3;
  outlen64 = 32;
  outlen64 -= t;
  outlen64 >>= 3;
  i = 0;
  while ( i < outlen64 )
  {
    t = state[i];
    out[u64 offset] = t;
    i += 1;
    offset += 1;
  }

  offset <<= 3;
  i <<= 3;
  outlen8 = 32;
  while ( offset < outlen8 )
  {
    c = state[u8 i];
    out[offset] = c;
    i += 1;
    offset += 1;
  }

  return out, offset;
}

inline fn __squeeze_32(
  reg mut ptr u64[25] state,
  reg ptr u8[32] out,
  reg u64 offset,
  reg u64 rate
) -> reg ptr u8[32], reg u64
{
  reg u64 outlen;
  stack ptr u8[32] s_out;
  stack u64 s_outlen s_offset s_rate;

  // intermediate blocks
  outlen = 32;
  while ( outlen > rate )
  {
    outlen -= rate;

    s_out = out;
    s_offset = offset;
    s_outlen = outlen;
    s_rate = rate;

    state = _keccakf1600_(state);

    out = s_out;
    offset = s_offset;
    outlen = s_outlen;
    rate = s_rate;

    out, offset = __xtr_full_block_32(state, out, offset, rate);
  }

  s_out = out;
  s_offset = offset;

  state = _keccakf1600_(state);

  out = s_out;
  offset = s_offset;

  out, offset = __xtr_bytes_32(state, out, offset);

  return out, offset;
}

inline fn __keccak1600_32_x(
  reg ptr u8[32] out,
  reg u64 in inlen,
  reg u8 trail_byte,
  reg u64 rate)
  ->
  reg ptr u8[32]
{
  stack u64[25] _state;
  reg ptr u64[25] state;

  stack ptr u8[32] s_out;
  stack u8 s_trail_byte;
  reg u64 offset;

  s_out = out;
  s_trail_byte = trail_byte;

  state = _state;
  state = __keccak_init(state);

  // absorb
  offset = 0;
  state, rate = __absorb_x(state, in, inlen, offset, s_trail_byte, rate);

  // squeeze
  out = s_out;
  offset = 0;
  out, _ = __squeeze_32(state, out, offset, rate);
  return out;
}

#[returnaddress="stack"]
fn _keccak1600_32_x(
  reg ptr u8[32] out,
  reg u64 in inlen,
  reg u8 trail_byte,
  reg u64 rate)
  ->
  reg ptr u8[32]
{
  out = __keccak1600_32_x(out, in, inlen, trail_byte, rate);
  return out;
}

inline fn _keccak1600__32_x(
  reg ptr u8[32] out,
  reg u64 in inlen,
  reg u8 trail_byte,
  reg u64 rate)
  ->
  reg ptr u8[32]
{
  out = out;
  in = in;
  trail_byte = trail_byte;
  rate = rate;

  out = _keccak1600_32_x(out, in, inlen, trail_byte, rate);

  out = out;
  return out;
}

inline fn __shake256_32_x(
  reg ptr u8[32] out,
  reg u64 in inlen
) -> reg ptr u8[32]
{
  reg u64 rate;
  reg u8 trail_byte;

  trail_byte = 0x1F;
  rate = (1088/8);

  out = _keccak1600__32_x(out, in, inlen, trail_byte, rate);
  
  return out;
}


inline fn __add_full_block_80(
  reg ptr u64[25] state,
  reg ptr u8[80] in,
  reg u64 offset,
  reg u64 rate
) -> reg ptr u64[25], reg u64
{
  reg u64 i t rate64;

  rate64 = rate;
  rate64 >>= 3;
  i = 0;
  while ( i < rate64 )
  {
    t = in[u64 offset];
    state[i] ^= t;
    i += 1;
    offset += 1;
  }

  return state, offset;
}

inline fn __add_final_block_80(
  reg ptr u64[25] state,
  reg ptr u8[80] in,
  reg u64 offset,
  reg u8 trail_byte,
  reg u64 rate
) -> reg ptr u64[25]
{
  reg u64 i t inlen64 inlen8;
  reg u8 c;

  t = offset;
  t <<= 3;
  inlen64 = 80;
  inlen64 -= t;
  inlen64 >>= 3;
  i = 0;
  while ( i < inlen64 )
  {
    t = in[u64 offset];
    state[i] ^= t;
    i += 1;
    offset += 1;
  }

  offset <<= 3;
  i <<= 3;
  inlen8 = 80;
  while ( offset < inlen8 )
  {
    c = in[offset];
    state[u8 i] ^= c;
    i += 1;
    offset += 1;
  }

  state[u8 i] ^= trail_byte;

  i = rate;
  i -= 1;
  state[u8 i] ^= 0x80;

  return state;
}

inline fn __absorb_80(
  reg ptr u64[25] state,
  reg ptr u8[80] in,
  reg u64 offset,
  stack u8 s_trail_byte,
  reg u64 rate // rate already in bytes -- it is returned bc of spills
) -> reg ptr u64[25], reg u64
{
  reg u64 inlen;
  stack u64 s_inlen s_offset s_rate;
  stack ptr u8[80] s_in;
  reg u8 trail_byte;

  // intermediate blocks
  inlen = 80;
  while ( inlen >= rate )
  {
    inlen -= rate;

    state, offset = __add_full_block_80(state, in, offset, rate);

    s_in = in;
    s_inlen = inlen;
    s_offset = offset;
    s_rate = rate;

    state = _keccakf1600(state);

    in = s_in;
    inlen = s_inlen;
    offset = s_offset;
    rate = s_rate;
  }

  // final block
  trail_byte = s_trail_byte;

  state = __add_final_block_80(state, in, offset, trail_byte, rate);

  return state, rate;
}

inline fn __xtr_full_block_24(
  reg ptr u64[25] state,
  reg ptr u8[24] out,
  reg u64 offset,
  reg u64 rate
) -> reg ptr u8[24], reg u64
{
  reg u64 i t rate64;

  rate64 = rate;
  rate64 >>= 3;
  i = 0;
  while ( i < rate64 )
  {
    t = state[i];
    out[u64  offset] = t;
    i += 1;
    offset += 1;
  }

  return out, offset;
}

inline fn __xtr_bytes_24(
  reg ptr u64[25] state,
  reg ptr u8[24] out,
  reg u64 offset
) -> reg ptr u8[24], reg u64
{
  reg u64 i t outlen64 outlen8;
  reg u8 c;

  t = offset;
  t <<= 3;
  outlen64 = 24;
  outlen64 -= t;
  outlen64 >>= 3;
  i = 0;
  while ( i < outlen64 )
  {
    t = state[i];
    out[u64 offset] = t;
    i += 1;
    offset += 1;
  }

  offset <<= 3;
  i <<= 3;
  outlen8 = 24;
  while ( offset < outlen8 )
  {
    c = state[u8 i];
    out[offset] = c;
    i += 1;
    offset += 1;
  }

  return out, offset;
}

inline fn __squeeze_24(
  reg mut ptr u64[25] state,
  reg ptr u8[24] out,
  reg u64 offset,
  reg u64 rate
) -> reg ptr u8[24], reg u64
{
  reg u64 outlen;
  stack ptr u8[24] s_out;
  stack u64 s_outlen s_offset s_rate;

  // intermediate blocks
  outlen = 24;
  while ( outlen > rate )
  {
    outlen -= rate;

    s_out = out;
    s_offset = offset;
    s_outlen = outlen;
    s_rate = rate;

    state = _keccakf1600_(state);

    out = s_out;
    offset = s_offset;
    outlen = s_outlen;
    rate = s_rate;

    out, offset = __xtr_full_block_24(state, out, offset, rate);
  }

  s_out = out;
  s_offset = offset;

  state = _keccakf1600_(state);

  out = s_out;
  offset = s_offset;

  out, offset = __xtr_bytes_24(state, out, offset);

  return out, offset;
}

inline fn __keccak1600_24_80(
  reg ptr u8[24] out,
  reg ptr u8[80] in,
  reg u8 trail_byte,
  reg u64 rate)
  ->
  reg ptr u8[24]
{
  stack u64[25] _state;
  reg ptr u64[25] state;

  stack ptr u8[24] s_out;
  stack u8 s_trail_byte;
  reg u64 offset;

  s_out = out;
  s_trail_byte = trail_byte;

  state = _state;
  state = __keccak_init(state);

  // absorb
  offset = 0;
  state, rate = __absorb_80(state, in, offset, s_trail_byte, rate);

  // squeeze
  out = s_out;
  offset = 0;
  out, _ = __squeeze_24(state, out, offset, rate);
  return out;
}

#[returnaddress="stack"]
fn _keccak1600_24_80(
  reg ptr u8[24] out,
  reg ptr u8[80] in,
  reg u8 trail_byte,
  reg u64 rate)
  ->
  reg ptr u8[24]
{
  out = __keccak1600_24_80(out, in, trail_byte, rate);
  return out;
}

inline fn _keccak1600__24_80(
  reg ptr u8[24] out,
  reg ptr u8[80] in,
  reg u8 trail_byte,
  reg u64 rate)
  ->
  reg ptr u8[24]
{
  out = out;
  in = in;
  trail_byte = trail_byte;
  rate = rate;

  out = _keccak1600_24_80(out, in, trail_byte, rate);

  out = out;
  return out;
}

inline fn __shake256_24_80(
  reg ptr u8[24] out,
  reg ptr u8[80] in
) -> reg ptr u8[24]
{
  reg u64 rate;
  reg u8 trail_byte;

  trail_byte = 0x1F;
  rate = (1088/8);

  out = _keccak1600__24_80(out, in, trail_byte, rate);
  
  return out;
}

inline fn __add_full_block_56(
  reg ptr u64[25] state,
  reg ptr u8[56] in,
  reg u64 offset,
  reg u64 rate
) -> reg ptr u64[25], reg u64
{
  reg u64 i t rate64;

  rate64 = rate;
  rate64 >>= 3;
  i = 0;
  while ( i < rate64 )
  {
    t = in[u64 offset];
    state[i] ^= t;
    i += 1;
    offset += 1;
  }

  return state, offset;
}

inline fn __add_final_block_56(
  reg ptr u64[25] state,
  reg ptr u8[56] in,
  reg u64 offset,
  reg u8 trail_byte,
  reg u64 rate
) -> reg ptr u64[25]
{
  reg u64 i t inlen64 inlen8;
  reg u8 c;

  t = offset;
  t <<= 3;
  inlen64 = 56;
  inlen64 -= t;
  inlen64 >>= 3;
  i = 0;
  while ( i < inlen64 )
  {
    t = in[u64 offset];
    state[i] ^= t;
    i += 1;
    offset += 1;
  }

  offset <<= 3;
  i <<= 3;
  inlen8 = 56;
  while ( offset < inlen8 )
  {
    c = in[offset];
    state[u8 i] ^= c;
    i += 1;
    offset += 1;
  }

  state[u8 i] ^= trail_byte;

  i = rate;
  i -= 1;
  state[u8 i] ^= 0x80;

  return state;
}

inline fn __absorb_56(
  reg ptr u64[25] state,
  reg ptr u8[56] in,
  reg u64 offset,
  stack u8 s_trail_byte,
  reg u64 rate // rate already in bytes -- it is returned bc of spills
) -> reg ptr u64[25], reg u64
{
  reg u64 inlen;
  stack u64 s_inlen s_offset s_rate;
  stack ptr u8[56] s_in;
  reg u8 trail_byte;

  // intermediate blocks
  inlen = 56;
  while ( inlen >= rate )
  {
    inlen -= rate;

    state, offset = __add_full_block_56(state, in, offset, rate);

    s_in = in;
    s_inlen = inlen;
    s_offset = offset;
    s_rate = rate;

    state = _keccakf1600(state);

    in = s_in;
    inlen = s_inlen;
    offset = s_offset;
    rate = s_rate;
  }

  // final block
  trail_byte = s_trail_byte;

  state = __add_final_block_56(state, in, offset, trail_byte, rate);

  return state, rate;
}

inline fn __xtr_full_block_32_a(
  reg ptr u64[25] state,
  reg ptr u8[32] out,
  reg u64 offset,
  reg u64 rate
) -> reg ptr u8[32], reg u64
{
  reg u64 i t rate64;

  rate64 = rate;
  rate64 >>= 3;
  i = 0;
  while ( i < rate64 )
  {
    t = state[i];
    out[u64  offset] = t;
    i += 1;
    offset += 1;
  }

  return out, offset;
}

inline fn __xtr_bytes_32_a(
  reg ptr u64[25] state,
  reg ptr u8[32] out,
  reg u64 offset
) -> reg ptr u8[32], reg u64
{
  reg u64 i t outlen64 outlen8;
  reg u8 c;

  t = offset;
  t <<= 3;
  outlen64 = 32;
  outlen64 -= t;
  outlen64 >>= 3;
  i = 0;
  while ( i < outlen64 )
  {
    t = state[i];
    out[u64 offset] = t;
    i += 1;
    offset += 1;
  }

  offset <<= 3;
  i <<= 3;
  outlen8 = 32;
  while ( offset < outlen8 )
  {
    c = state[u8 i];
    out[offset] = c;
    i += 1;
    offset += 1;
  }

  return out, offset;
}

inline fn __squeeze_32_a(
  reg mut ptr u64[25] state,
  reg ptr u8[32] out,
  reg u64 offset,
  reg u64 rate
) -> reg ptr u8[32], reg u64
{
  reg u64 outlen;
  stack ptr u8[32] s_out;
  stack u64 s_outlen s_offset s_rate;

  // intermediate blocks
  outlen = 32;
  while ( outlen > rate )
  {
    outlen -= rate;

    s_out = out;
    s_offset = offset;
    s_outlen = outlen;
    s_rate = rate;

    state = _keccakf1600_(state);

    out = s_out;
    offset = s_offset;
    outlen = s_outlen;
    rate = s_rate;

    out, offset = __xtr_full_block_32_a(state, out, offset, rate);
  }

  s_out = out;
  s_offset = offset;

  state = _keccakf1600_(state);

  out = s_out;
  offset = s_offset;

  out, offset = __xtr_bytes_32_a(state, out, offset);

  return out, offset;
}

inline fn __keccak1600_32_56(
  reg ptr u8[32] out,
  reg ptr u8[56] in,
  reg u8 trail_byte,
  reg u64 rate)
  ->
  reg ptr u8[32]
{
  stack u64[25] _state;
  reg ptr u64[25] state;

  stack ptr u8[32] s_out;
  stack u8 s_trail_byte;
  reg u64 offset;

  s_out = out;
  s_trail_byte = trail_byte;

  state = _state;
  state = __keccak_init(state);

  // absorb
  offset = 0;
  state, rate = __absorb_56(state, in, offset, s_trail_byte, rate);

  // squeeze
  out = s_out;
  offset = 0;
  out, _ = __squeeze_32_a(state, out, offset, rate);
  return out;
}

#[returnaddress="stack"]
fn _keccak1600_32_56(
  reg ptr u8[32] out,
  reg ptr u8[56] in,
  reg u8 trail_byte,
  reg u64 rate)
  ->
  reg ptr u8[32]
{
  out = __keccak1600_32_56(out, in, trail_byte, rate);
  return out;
}

inline fn _keccak1600__32_56(
  reg ptr u8[32] out,
  reg ptr u8[56] in,
  reg u8 trail_byte,
  reg u64 rate)
  ->
  reg ptr u8[32]
{
  out = out;
  in = in;
  trail_byte = trail_byte;
  rate = rate;

  out = _keccak1600_32_56(out, in, trail_byte, rate);

  out = out;
  return out;
}

inline fn __shake256_32_56(
  reg ptr u8[32] out,
  reg ptr u8[56] in
) -> reg ptr u8[32]
{
  reg u64 rate;
  reg u8 trail_byte;

  trail_byte = 0x1F;
  rate = (1088/8);

  out = _keccak1600__32_56(out, in, trail_byte, rate);
  
  return out;
}


inline fn __add_full_block_81(
  reg ptr u64[25] state,
  reg ptr u8[81] in,
  reg u64 offset,
  reg u64 rate
) -> reg ptr u64[25], reg u64
{
  reg u64 i t rate64;

  rate64 = rate;
  rate64 >>= 3;
  i = 0;
  while ( i < rate64 )
  {
    t = in[u64 offset];
    state[i] ^= t;
    i += 1;
    offset += 1;
  }

  return state, offset;
}

inline fn __add_final_block_81(
  reg ptr u64[25] state,
  reg ptr u8[81] in,
  reg u64 offset,
  reg u8 trail_byte,
  reg u64 rate
) -> reg ptr u64[25]
{
  reg u64 i t inlen64 inlen8;
  reg u8 c;

  t = offset;
  t <<= 3;
  inlen64 = 81;
  inlen64 -= t;
  inlen64 >>= 3;
  i = 0;
  while ( i < inlen64 )
  {
    t = in[u64 offset];
    state[i] ^= t;
    i += 1;
    offset += 1;
  }

  offset <<= 3;
  i <<= 3;
  inlen8 = 81;
  while ( offset < inlen8 )
  {
    c = in[offset];
    state[u8 i] ^= c;
    i += 1;
    offset += 1;
  }

  state[u8 i] ^= trail_byte;

  i = rate;
  i -= 1;
  state[u8 i] ^= 0x80;

  return state;
}

inline fn __absorb_81(
  reg ptr u64[25] state,
  reg ptr u8[81] in,
  reg u64 offset,
  stack u8 s_trail_byte,
  reg u64 rate // rate already in bytes -- it is returned bc of spills
) -> reg ptr u64[25], reg u64
{
  reg u64 inlen;
  stack u64 s_inlen s_offset s_rate;
  stack ptr u8[81] s_in;
  reg u8 trail_byte;

  // intermediate blocks
  inlen = 81;
  while ( inlen >= rate )
  {
    inlen -= rate;

    state, offset = __add_full_block_81(state, in, offset, rate);

    s_in = in;
    s_inlen = inlen;
    s_offset = offset;
    s_rate = rate;

    state = _keccakf1600(state);

    in = s_in;
    inlen = s_inlen;
    offset = s_offset;
    rate = s_rate;
  }

  // final block
  trail_byte = s_trail_byte;

  state = __add_final_block_81(state, in, offset, trail_byte, rate);

  return state, rate;
}

inline fn __xtr_full_block_156(
  reg ptr u64[25] state,
  reg ptr u8[156] out,
  reg u64 offset,
  reg u64 rate
) -> reg ptr u8[156], reg u64
{
  reg u64 i t rate64;

  rate64 = rate;
  rate64 >>= 3;
  i = 0;
  while ( i < rate64 )
  {
    t = state[i];
    out[u64  offset] = t;
    i += 1;
    offset += 1;
  }

  return out, offset;
}

inline fn __xtr_bytes_156(
  reg ptr u64[25] state,
  reg ptr u8[156] out,
  reg u64 offset
) -> reg ptr u8[156], reg u64
{
  reg u64 i t outlen64 outlen8;
  reg u8 c;

  t = offset;
  t <<= 3;
  outlen64 = 156;
  outlen64 -= t;
  outlen64 >>= 3;
  i = 0;
  while ( i < outlen64 )
  {
    t = state[i];
    out[u64 offset] = t;
    i += 1;
    offset += 1;
  }

  offset <<= 3;
  i <<= 3;
  outlen8 = 156;
  while ( offset < outlen8 )
  {
    c = state[u8 i];
    out[offset] = c;
    i += 1;
    offset += 1;
  }

  return out, offset;
}

inline fn __squeeze_156(
  reg mut ptr u64[25] state,
  reg ptr u8[156] out,
  reg u64 offset,
  reg u64 rate
) -> reg ptr u8[156], reg u64
{
  reg u64 outlen;
  stack ptr u8[156] s_out;
  stack u64 s_outlen s_offset s_rate;

  // intermediate blocks
  outlen = 156;
  while ( outlen > rate )
  {
    outlen -= rate;

    s_out = out;
    s_offset = offset;
    s_outlen = outlen;
    s_rate = rate;

    state = _keccakf1600_(state);

    out = s_out;
    offset = s_offset;
    outlen = s_outlen;
    rate = s_rate;

    out, offset = __xtr_full_block_156(state, out, offset, rate);
  }

  s_out = out;
  s_offset = offset;

  state = _keccakf1600_(state);

  out = s_out;
  offset = s_offset;

  out, offset = __xtr_bytes_156(state, out, offset);

  return out, offset;
}

inline fn __keccak1600_156_81(
  reg ptr u8[156] out,
  reg ptr u8[81] in,
  reg u8 trail_byte,
  reg u64 rate)
  ->
  reg ptr u8[156]
{
  stack u64[25] _state;
  reg ptr u64[25] state;

  stack ptr u8[156] s_out;
  stack u8 s_trail_byte;
  reg u64 offset;

  s_out = out;
  s_trail_byte = trail_byte;

  state = _state;
  state = __keccak_init(state);

  // absorb
  offset = 0;
  state, rate = __absorb_81(state, in, offset, s_trail_byte, rate);

  // squeeze
  out = s_out;
  offset = 0;
  out, _ = __squeeze_156(state, out, offset, rate);
  return out;
}

#[returnaddress="stack"]
fn _keccak1600_156_81(
  reg ptr u8[156] out,
  reg ptr u8[81] in,
  reg u8 trail_byte,
  reg u64 rate)
  ->
  reg ptr u8[156]
{
  out = __keccak1600_156_81(out, in, trail_byte, rate);
  return out;
}

inline fn _keccak1600__156_81(
  reg ptr u8[156] out,
  reg ptr u8[81] in,
  reg u8 trail_byte,
  reg u64 rate)
  ->
  reg ptr u8[156]
{
  out = out;
  in = in;
  trail_byte = trail_byte;
  rate = rate;

  out = _keccak1600_156_81(out, in, trail_byte, rate);

  out = out;
  return out;
}

inline fn __shake256_156_81(
  reg ptr u8[156] out,
  reg ptr u8[81] in
) -> reg ptr u8[156]
{
  reg u64 rate;
  reg u8 trail_byte;

  trail_byte = 0x1F;
  rate = (1088/8);

  out = _keccak1600__156_81(out, in, trail_byte, rate);
  
  return out;
}
